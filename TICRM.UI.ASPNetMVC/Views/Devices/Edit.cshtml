@model TICRM.DTOs.DeviceViewModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}
@*<style>
        #map {
            height: 500px;
            width: 100%;
        }
    </style>*@
<div class="page-wrapper">

    <!-- Page Content-->
    <div class="page-content-tab">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-12">
                    <div class="page-title-box">
                        <h4 class="page-title">Edit Device</h4>
                    </div>
                    <!--end page-title-box-->
                </div>
                <!--end col-->
            </div>

            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "DevicesEditForm" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.DeviceId)

                            <div class="row">

                                <div class="col-lg-6">
                                    <div class="mb-3 row">
                                        <label for="example-text-input" class="col-sm-2 col-form-label text-end">Name<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Device Name" } })
                                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-email-input" class="col-sm-2 col-form-label text-end">Mac<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.EditorFor(model => model.Mac, new { htmlAttributes = new { @class = "form-control", @placeholder = "XX-XX-XX-XX-XX-XX" } })
                                            @Html.ValidationMessageFor(model => model.Mac, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-tel-input" class="col-sm-2 col-form-label text-end">EMEI Number<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.EditorFor(model => model.EMEINumber, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter EMEI Number" } })
                                            @Html.ValidationMessageFor(model => model.EMEINumber, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-password-input" class="col-sm-2 col-form-label text-end">Registration Date<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.EditorFor(model => model.RegistrationDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.RegistrationDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-number-input" class="col-sm-2 col-form-label text-end">Latitude<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Latitude", id = "lat", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-datetime-local-input" class="col-sm-2 col-form-label text-end">Longitude<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Longitude", id = "long",  @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="exampleColorInput" class="col-sm-2 col-form-label text-end">Status<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.DropDownListFor(model => model.StatusId, Model.StatusDropdown, "-- Select --", htmlAttributes: new { @class = "form-control SearchableDropDown", @id = "status" })
                                            @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-lg-6">
                                    <div class="mb-3 row">
                                        <label for="example-url-input" class="col-sm-2 col-form-label text-end">Account<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.DropDownListFor(model => model.AccountId, Model.AccountsDropdown, "-- Select --", htmlAttributes: new { @class = "form-control SearchableDropDown" })
                                            @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-date-input" class="col-sm-2 col-form-label text-end">Customer assest<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.DropDownListFor(model => model.CustomerAssetId, Model.CustomerAssetDropdown, "-- Select --", htmlAttributes: new { @class = "form-control SearchableDropDown" })
                                            @Html.ValidationMessageFor(model => model.CustomerAssetId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-month-input" class="col-sm-2 col-form-label text-end">Assigned User<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.DropDownListFor(model => model.AssignedUser, Model.AssignedUserDropdown, "-- Select --", htmlAttributes: new { @class = "form-control SearchableDropDown" })
                                            @Html.ValidationMessageFor(model => model.AssignedUser, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-week-input" class="col-sm-2 col-form-label text-end">Assined Team<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.DropDownListFor(model => model.AssignedTeam, Model.AssignedTeamDropdown, "-- Select --", htmlAttributes: new { @class = "form-control SearchableDropDown" })
                                            @Html.ValidationMessageFor(model => model.AssignedTeam, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row">
                                        <label for="example-time-input" class="col-sm-2 col-form-label text-end">Maintenance<span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.DropDownListFor(model => model.Maintenance, Model.MaintenanceDropdown, "-- Select --", htmlAttributes: new { @class = "form-control SearchableDropDown" })
                                            @Html.ValidationMessageFor(model => model.Maintenance, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mb-3 row has-success">
                                        <label for="inputHorizontalSuccess" class="col-sm-2 col-form-label text-end">Cloud services <span class="text-danger">  *</span></label>
                                        <div class="col-sm-10">
                                            @Html.DropDownListFor(model => model.CloudServices, Model.CloudServicesDropdown, "-- Select --", htmlAttributes: new { @class = "form-control SearchableDropDown" })
                                            @Html.ValidationMessageFor(model => model.CloudServices, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-sm-12">
                                    <a href="/Devices/Index" class="btn btn-primary ">
                                        <i class="la la-arrow-left"></i>
                                        <span>Back to List</span>
                                    </a>
                                    <button type="submit" id="savebtn" class="btn btn-primary float-end"><i class="la la-save"></i> Update</button>
                                </div>
                            </div>
                            @*<div class="row col-lg-12 mt-3 px-3">
                                    <input type="text" id="search-box" placeholder="Search for a place">
                                    <div id="map"></div>
                                </div>*@
                        }
                    </div>
                </div>
            </div>
            <!--end card-body-->
        </div>
    </div>
</div>

@*<script>
        var map;
        var service;
        var marker;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 30.3753, lng: 69.3451 },
                zoom: 8,
            });

            // Add a click event listener to the map
            map.addListener('click', function (event) {

                // Remove the old marker, if one exists
                if (marker) {
                    marker.setMap(null);
                }

                // Add a new marker at the clicked location
                marker = new google.maps.Marker({
                    position: event.latLng,
                    map: map
                });

                // Save the coordinates of the clicked location
                coords = event.latLng;
            });
            service = new google.maps.places.PlacesService(map);

            // Add current location marker

                    var latitude = @ViewBag.Latitude;
                   var longitude = @ViewBag.Longitude;

            if (latitude.length != 0 && longitude.length != 0) {
                /* navigator.geolocation.watchPosition(showPosition);*/
                navigator.geolocation.getCurrentPosition(function (position) {
                    var currentLocation = {
                        lat: latitude,
                        lng: longitude
                    };
                    marker = new google.maps.Marker({
                        position: currentLocation,
                        map: map,
                        title: "Current Location"
                    });
                    map.setCenter(currentLocation);
                }, function () {
                    // Handle geolocation error
                });
            }

            map.addListener("click", function (e) {
                var latLng = e.latLng;
                document.getElementById("lat").value = latLng.lat().toFixed(6);
                document.getElementById("long").value = latLng.lng().toFixed(6);
                sendData(latLng.lat(), latLng.lng());
            });

            var searchBox = document.getElementById("search-box");
            searchBox.addEventListener("keydown", function (event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    var query = searchBox.value;
                    searchPlaces(query);
                }
            });

        }

        function showPosition(position) {
            document.getElementById("lat").value = position.coords.latitude.toFixed(6);
            document.getElementById("long").value = position.coords.longitude.toFixed(6);
        }

        function searchPlaces(query) {
            var request = {
                query: query,
                fields: ["name", "geometry"],
            };

            service.textSearch(request, function (results, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK) {
                    for (var i = 0; i < results.length; i++) {
                        createMarker(results[i]);
                    }
                    map.setCenter(results[0].geometry.location);
                }
            });
        }

        function createMarker(place) {
            var marker = new google.maps.Marker({
                map: map,
                position: place.geometry.location,
                title: place.name,
            });

            marker.addListener("click", function () {
                var content =
                    "<h3>" +
                    place.name +
                    "</h3>" +
                    "<p>Latitude: " +
                    place.geometry.location.lat() +
                    "</p>" +
                    "<p>Longitude: " +
                    place.geometry.location.lng() +
                    "</p>";

                var infoWindow = new google.maps.InfoWindow({
                    content: content,
                });

                infoWindow.open(map, marker);
            });
        }
    </script>*@

@*<script async
        defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDPHcns47fUHPSSG_CsYwb7Aq0rwjsdO7E&libraries=places&callback=initMap"></script>*@