//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TICRM.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CRMEntities : DbContext
    {
        public CRMEntities()
            : base("name=CRMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountSize> AccountSizes { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityTemplate> ActivityTemplates { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Alert> Alerts { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<CaseResolution> CaseResolutions { get; set; }
        public virtual DbSet<Case> Cases { get; set; }
        public virtual DbSet<CaseStatu> CaseStatus { get; set; }
        public virtual DbSet<CaseType> CaseTypes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Channel> Channels { get; set; }
        public virtual DbSet<Consumption> Consumptions { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ContactLead> ContactLeads { get; set; }
        public virtual DbSet<ContactOrder> ContactOrders { get; set; }
        public virtual DbSet<ContactQuote> ContactQuotes { get; set; }
        public virtual DbSet<Cost> Costs { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CustomerAsset> CustomerAssets { get; set; }
        public virtual DbSet<CustomerAssetType> CustomerAssetTypes { get; set; }
        public virtual DbSet<Data_Duration> Data_Duration { get; set; }
        public virtual DbSet<DeciveConfiguration> DeciveConfigurations { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceSensor> DeviceSensors { get; set; }
        public virtual DbSet<DeviceSensorGraph> DeviceSensorGraphs { get; set; }
        public virtual DbSet<Disconnection> Disconnections { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<EmailConfiguration> EmailConfigurations { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<EventMonitor> EventMonitors { get; set; }
        public virtual DbSet<EventNotification> EventNotifications { get; set; }
        public virtual DbSet<Firmware> Firmwares { get; set; }
        public virtual DbSet<GlobalSearch> GlobalSearches { get; set; }
        public virtual DbSet<Graph> Graphs { get; set; }
        public virtual DbSet<Industry> Industries { get; set; }
        public virtual DbSet<Lead> Leads { get; set; }
        public virtual DbSet<LeadAccount> LeadAccounts { get; set; }
        public virtual DbSet<LeadSource> LeadSources { get; set; }
        public virtual DbSet<LeadType> LeadTypes { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationType> LocationTypes { get; set; }
        public virtual DbSet<Meeting> Meetings { get; set; }
        public virtual DbSet<Membership> Memberships { get; set; }
        public virtual DbSet<Network> Networks { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<Opportunity> Opportunities { get; set; }
        public virtual DbSet<OpportunityStage> OpportunityStages { get; set; }
        public virtual DbSet<PhoneCall> PhoneCalls { get; set; }
        public virtual DbSet<Pobability> Pobabilities { get; set; }
        public virtual DbSet<Priority> Priorities { get; set; }
        public virtual DbSet<ProductCatelog> ProductCatelogs { get; set; }
        public virtual DbSet<ProductPriceList> ProductPriceLists { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<Reading> Readings { get; set; }
        public virtual DbSet<ReadingType> ReadingTypes { get; set; }
        public virtual DbSet<ReadingUnit> ReadingUnits { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<ResourceAvailability> ResourceAvailabilities { get; set; }
        public virtual DbSet<ResourceSkill> ResourceSkills { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Sensor> Sensors { get; set; }
        public virtual DbSet<SensorData> SensorDatas { get; set; }
        public virtual DbSet<ServiceCall> ServiceCalls { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<SkillLevel> SkillLevels { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamUser> TeamUsers { get; set; }
        public virtual DbSet<Temp> Temps { get; set; }
        public virtual DbSet<Tracking> Trackings { get; set; }
        public virtual DbSet<UnitCost> UnitCosts { get; set; }
        public virtual DbSet<Urgency> Urgencies { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<User1> Users1 { get; set; }
        public virtual DbSet<WorkFlow> WorkFlows { get; set; }
        public virtual DbSet<WorkFlowMapping> WorkFlowMappings { get; set; }
        public virtual DbSet<WorkFlowNode> WorkFlowNodes { get; set; }
        public virtual DbSet<WorkFlowReport> WorkFlowReports { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkStage> WorkStages { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<OrderDevice> OrderDevices { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<EmailIntegration> EmailIntegrations { get; set; }
        public virtual DbSet<SuperAdminCred> SuperAdminCreds { get; set; }
    
        public virtual ObjectResult<string> sp_AccCurrencyName_Get(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_AccCurrencyName_Get", iDParameter);
        }
    
        public virtual ObjectResult<sp_AccSalesMonthWise_Get_Result> sp_AccSalesMonthWise_Get(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AccSalesMonthWise_Get_Result>("sp_AccSalesMonthWise_Get", iDParameter);
        }
    
        public virtual ObjectResult<sp_Channel_Get_Result> sp_Channel_Get(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Channel_Get_Result>("sp_Channel_Get", iDParameter);
        }
    
        public virtual ObjectResult<sp_CloudDevices_Get_Result> sp_CloudDevices_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CloudDevices_Get_Result>("sp_CloudDevices_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<string> sp_DeviceType_Get(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_DeviceType_Get", iDParameter);
        }
    
        public virtual ObjectResult<sp_DisConnectivityTime_Get_Result> sp_DisConnectivityTime_Get(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DisConnectivityTime_Get_Result>("sp_DisConnectivityTime_Get", iDParameter);
        }
    
        public virtual ObjectResult<sp_LeadFromSourceCount_Get_Result> sp_LeadFromSourceCount_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeadFromSourceCount_Get_Result>("sp_LeadFromSourceCount_Get");
        }
    
        public virtual ObjectResult<sp_RelatedToValues_Get_Result> sp_RelatedToValues_Get(string val, string companyID)
        {
            var valParameter = val != null ?
                new ObjectParameter("val", val) :
                new ObjectParameter("val", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RelatedToValues_Get_Result>("sp_RelatedToValues_Get", valParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisMonthCost_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisMonthCost_Get");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisMonthLead_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisMonthLead_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_ThisMonthLeadsRepo_Get_Result> sp_ThisMonthLeadsRepo_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ThisMonthLeadsRepo_Get_Result>("sp_ThisMonthLeadsRepo_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_ThisMonthSales_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_ThisMonthSales_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisMonthWorkOrder_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisMonthWorkOrder_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_ThisWeekActivity_Get_Result> sp_ThisWeekActivity_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ThisWeekActivity_Get_Result>("sp_ThisWeekActivity_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisWeekCost_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisWeekCost_Get");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisWeekLead_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisWeekLead_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_ThisWeekLeadsRepo_Get_Result> sp_ThisWeekLeadsRepo_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ThisWeekLeadsRepo_Get_Result>("sp_ThisWeekLeadsRepo_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_ThisWeekSales_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_ThisWeekSales_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisWeekWorkOrder_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisWeekWorkOrder_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_ThisYearActivity_Get_Result> sp_ThisYearActivity_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ThisYearActivity_Get_Result>("sp_ThisYearActivity_Get");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisYearCost_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisYearCost_Get");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisYearLead_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisYearLead_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_ThisYearLeadsRepo_Get_Result> sp_ThisYearLeadsRepo_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ThisYearLeadsRepo_Get_Result>("sp_ThisYearLeadsRepo_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_ThisYearSales_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_ThisYearSales_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisYearWorkOrder_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisYearWorkOrder_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_TodayActivity_Get_Result> sp_TodayActivity_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TodayActivity_Get_Result>("sp_TodayActivity_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_YesterdayActivity_Get_Result> sp_YesterdayActivity_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_YesterdayActivity_Get_Result>("sp_YesterdayActivity_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCostSum()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCostSum");
        }
    
        public virtual ObjectResult<spGetAccActivity_Result> spGetAccActivity(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAccActivity_Result>("spGetAccActivity", iDParameter);
        }
    
        public virtual ObjectResult<spGetAccWorkFlow_Result> spGetAccWorkFlow(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAccWorkFlow_Result>("spGetAccWorkFlow", iDParameter);
        }
    
        public virtual ObjectResult<spGetActivities_Result> spGetActivities(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetActivities_Result>("spGetActivities", companyIDParameter);
        }
    
        public virtual ObjectResult<spGetCasesLoc_Result> spGetCasesLoc(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCasesLoc_Result>("spGetCasesLoc", iDParameter);
        }
    
        public virtual ObjectResult<spGetContact_Result> spGetContact(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetContact_Result>("spGetContact", iDParameter);
        }
    
        public virtual ObjectResult<spGetDevice_Result> spGetDevice(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDevice_Result>("spGetDevice", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<spGetLeadsReport_Result> spGetLeadsReport(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeadsReport_Result>("spGetLeadsReport", companyIDParameter);
        }
    
        public virtual ObjectResult<spGetLiveDevice_Result> spGetLiveDevice(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLiveDevice_Result>("spGetLiveDevice", companyIDParameter);
        }
    
        public virtual ObjectResult<spGetNetwork_Result> spGetNetwork(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetNetwork_Result>("spGetNetwork", iDParameter);
        }
    
        public virtual ObjectResult<spGetOppMonthWise_Result> spGetOppMonthWise(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOppMonthWise_Result>("spGetOppMonthWise", companyIDParameter);
        }
    
        public virtual ObjectResult<spGetOpportunity_Result> spGetOpportunity(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOpportunity_Result>("spGetOpportunity", iDParameter);
        }
    
        public virtual ObjectResult<spGetOpportunityLoc_Result> spGetOpportunityLoc(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOpportunityLoc_Result>("spGetOpportunityLoc", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spGetOpportuniySales(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spGetOpportuniySales", companyIDParameter);
        }
    
        public virtual ObjectResult<spGetSalesMonthWise_Result> spGetSalesMonthWise(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSalesMonthWise_Result>("spGetSalesMonthWise", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> spGetWonLeads(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("spGetWonLeads", iDParameter);
        }
    
        public virtual ObjectResult<spGetWorkFlow_Result> spGetWorkFlow(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWorkFlow_Result>("spGetWorkFlow", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetWorkFlowCount(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetWorkFlowCount", iDParameter);
        }
    
        public virtual ObjectResult<spGetWorkFlowReports_Result> spGetWorkFlowReports(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWorkFlowReports_Result>("spGetWorkFlowReports", iDParameter);
        }
    
        public virtual ObjectResult<spGetWorkOrder_Result> spGetWorkOrder(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWorkOrder_Result>("spGetWorkOrder", iDParameter);
        }
    
        public virtual ObjectResult<spGetWorkStatus_Result> spGetWorkStatus(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWorkStatus_Result>("spGetWorkStatus", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spLeadCount(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spLeadCount", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spWorkOrderCount(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spWorkOrderCount", companyIDParameter);
        }
    
        public virtual ObjectResult<spWorkOrderDetail_Result> spWorkOrderDetail(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spWorkOrderDetail_Result>("spWorkOrderDetail", iDParameter);
        }
    
        public virtual ObjectResult<Account> sp_Accounts_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("sp_Accounts_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Account> sp_Accounts_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("sp_Accounts_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Contact> sp_Contacts_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Contact>("sp_Contacts_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Contact> sp_Contacts_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Contact>("sp_Contacts_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Activity> sp_Activities_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Activity>("sp_Activities_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Activity> sp_Activities_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Activity>("sp_Activities_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Case> sp_Cases_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Case>("sp_Cases_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Case> sp_Cases_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Case>("sp_Cases_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<CustomerAsset> sp_CustomerAssets_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerAsset>("sp_CustomerAssets_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<CustomerAsset> sp_CustomerAssets_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerAsset>("sp_CustomerAssets_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Device> sp_Devices_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Device>("sp_Devices_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Device> sp_Devices_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Device>("sp_Devices_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Lead> sp_Leads_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lead>("sp_Leads_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Lead> sp_Leads_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lead>("sp_Leads_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Location> sp_Locations_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("sp_Locations_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Location> sp_Locations_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("sp_Locations_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Opportunity> sp_Opportunities_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Opportunity>("sp_Opportunities_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Opportunity> sp_Opportunities_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Opportunity>("sp_Opportunities_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<WorkFlowReport> sp_WorkFlowReports_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkFlowReport>("sp_WorkFlowReports_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<WorkFlowReport> sp_WorkFlowReports_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkFlowReport>("sp_WorkFlowReports_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<WorkFlow> sp_WorkFlows_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkFlow>("sp_WorkFlows_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<WorkFlow> sp_WorkFlows_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkFlow>("sp_WorkFlows_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<WorkOrder> sp_WorkOrders_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkOrder>("sp_WorkOrders_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<WorkOrder> sp_WorkOrders_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkOrder>("sp_WorkOrders_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Address> sp_Addresses_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Address>("sp_Addresses_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Address> sp_Addresses_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Address>("sp_Addresses_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Resource> sp_Resources_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Resource>("sp_Resources_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<Resource> sp_Resources_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Resource>("sp_Resources_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<ServiceCall> sp_ServiceCalls_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServiceCall>("sp_ServiceCalls_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<ServiceCall> sp_ServiceCalls_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServiceCall>("sp_ServiceCalls_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<AspNetUser> sp_UsersWithRole_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AspNetUser>("sp_UsersWithRole_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<AspNetUser> sp_UsersWithRole_Get(string companyID, MergeOption mergeOption)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AspNetUser>("sp_UsersWithRole_Get", mergeOption, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_AccountDropDown_Get_Result> sp_AccountDropDown_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AccountDropDown_Get_Result>("sp_AccountDropDown_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_AccSizeDropDown_Get_Result> sp_AccSizeDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AccSizeDropDown_Get_Result>("sp_AccSizeDropDown_Get");
        }
    
        public virtual ObjectResult<sp_AccTypeDropDown_Get_Result> sp_AccTypeDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AccTypeDropDown_Get_Result>("sp_AccTypeDropDown_Get");
        }
    
        public virtual ObjectResult<sp_AddressDropDown_Get_Result> sp_AddressDropDown_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AddressDropDown_Get_Result>("sp_AddressDropDown_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_AssUserDropDown_Get_Result> sp_AssUserDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AssUserDropDown_Get_Result>("sp_AssUserDropDown_Get");
        }
    
        public virtual ObjectResult<sp_CaseStatusDropDown_Get_Result> sp_CaseStatusDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CaseStatusDropDown_Get_Result>("sp_CaseStatusDropDown_Get");
        }
    
        public virtual ObjectResult<sp_CaseTypeDropDown_Get_Result> sp_CaseTypeDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CaseTypeDropDown_Get_Result>("sp_CaseTypeDropDown_Get");
        }
    
        public virtual ObjectResult<sp_ChannelDropDown_Get_Result> sp_ChannelDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChannelDropDown_Get_Result>("sp_ChannelDropDown_Get");
        }
    
        public virtual ObjectResult<sp_ContactDropDown_Get_Result> sp_ContactDropDown_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ContactDropDown_Get_Result>("sp_ContactDropDown_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_CountryDropDown_Get_Result> sp_CountryDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CountryDropDown_Get_Result>("sp_CountryDropDown_Get");
        }
    
        public virtual ObjectResult<sp_CurrencyDropDown_Get_Result> sp_CurrencyDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CurrencyDropDown_Get_Result>("sp_CurrencyDropDown_Get");
        }
    
        public virtual ObjectResult<sp_CustAssDropDown_Get_Result> sp_CustAssDropDown_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustAssDropDown_Get_Result>("sp_CustAssDropDown_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_DataDuraDropDown_Get_Result> sp_DataDuraDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DataDuraDropDown_Get_Result>("sp_DataDuraDropDown_Get");
        }
    
        public virtual ObjectResult<sp_DeviceDropDown_Get_Result> sp_DeviceDropDown_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeviceDropDown_Get_Result>("sp_DeviceDropDown_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_GraphDropDown_Get_Result> sp_GraphDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GraphDropDown_Get_Result>("sp_GraphDropDown_Get");
        }
    
        public virtual ObjectResult<sp_IndustryDropDown_Get_Result> sp_IndustryDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IndustryDropDown_Get_Result>("sp_IndustryDropDown_Get");
        }
    
        public virtual ObjectResult<sp_LeadTypeDropDown_Get_Result> sp_LeadTypeDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeadTypeDropDown_Get_Result>("sp_LeadTypeDropDown_Get");
        }
    
        public virtual ObjectResult<sp_LocationDropDown_Get_Result> sp_LocationDropDown_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LocationDropDown_Get_Result>("sp_LocationDropDown_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_LocaTypeDropDown_Get_Result> sp_LocaTypeDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LocaTypeDropDown_Get_Result>("sp_LocaTypeDropDown_Get");
        }
    
        public virtual ObjectResult<sp_NetworkDropDown_Get_Result> sp_NetworkDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NetworkDropDown_Get_Result>("sp_NetworkDropDown_Get");
        }
    
        public virtual ObjectResult<sp_OppStageDropDown_Get_Result> sp_OppStageDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OppStageDropDown_Get_Result>("sp_OppStageDropDown_Get");
        }
    
        public virtual ObjectResult<sp_PobabilityDropDown_Get_Result> sp_PobabilityDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PobabilityDropDown_Get_Result>("sp_PobabilityDropDown_Get");
        }
    
        public virtual ObjectResult<sp_PriorityDropDown_Get_Result> sp_PriorityDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PriorityDropDown_Get_Result>("sp_PriorityDropDown_Get");
        }
    
        public virtual ObjectResult<sp_SensorDropDown_Get_Result> sp_SensorDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SensorDropDown_Get_Result>("sp_SensorDropDown_Get");
        }
    
        public virtual ObjectResult<sp_SrvcCallStgDropDown_Get_Result> sp_SrvcCallStgDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SrvcCallStgDropDown_Get_Result>("sp_SrvcCallStgDropDown_Get");
        }
    
        public virtual ObjectResult<sp_StatusDropDown_Get_Result> sp_StatusDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StatusDropDown_Get_Result>("sp_StatusDropDown_Get");
        }
    
        public virtual ObjectResult<sp_TeamDropDown_Get_Result> sp_TeamDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TeamDropDown_Get_Result>("sp_TeamDropDown_Get");
        }
    
        public virtual ObjectResult<sp_UrgencyDropDown_Get_Result> sp_UrgencyDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UrgencyDropDown_Get_Result>("sp_UrgencyDropDown_Get");
        }
    
        public virtual ObjectResult<sp_WorkFlowDropDown_Get_Result> sp_WorkFlowDropDown_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WorkFlowDropDown_Get_Result>("sp_WorkFlowDropDown_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_CusAssTypeDropDown_Get_Result> sp_CusAssTypeDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CusAssTypeDropDown_Get_Result>("sp_CusAssTypeDropDown_Get");
        }
    
        public virtual ObjectResult<sp_WorkStageDropDown_Get_Result> sp_WorkStageDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WorkStageDropDown_Get_Result>("sp_WorkStageDropDown_Get");
        }
    
        public virtual ObjectResult<sp_LeadSourDropDown_Get_Result> sp_LeadSourDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LeadSourDropDown_Get_Result>("sp_LeadSourDropDown_Get");
        }
    
        public virtual ObjectResult<sp_ActionDropDown_Get_Result> sp_ActionDropDown_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ActionDropDown_Get_Result>("sp_ActionDropDown_Get");
        }
    
        public virtual ObjectResult<DeviceSensorGraph> sp_DeviceSensors_Get(string iD, string role, string companyID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeviceSensorGraph>("sp_DeviceSensors_Get", iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<DeviceSensorGraph> sp_DeviceSensors_Get(string iD, string role, string companyID, MergeOption mergeOption)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeviceSensorGraph>("sp_DeviceSensors_Get", mergeOption, iDParameter, roleParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<EmailIntegration> sp_EmailIntegration_Get(string companyID, string role)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailIntegration>("sp_EmailIntegration_Get", companyIDParameter, roleParameter);
        }
    
        public virtual ObjectResult<EmailIntegration> sp_EmailIntegration_Get(string companyID, string role, MergeOption mergeOption)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailIntegration>("sp_EmailIntegration_Get", mergeOption, companyIDParameter, roleParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AllYearOpp_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AllYearOpp_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisMonthOpp_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisMonthOpp_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisWeekOpp_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisWeekOpp_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ThisYearOpp_Get(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ThisYearOpp_Get", companyIDParameter);
        }
    
        public virtual ObjectResult<Device> sp_AllCompDevices_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Device>("sp_AllCompDevices_Get");
        }
    
        public virtual ObjectResult<Device> sp_AllCompDevices_Get(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Device>("sp_AllCompDevices_Get", mergeOption);
        }
    
        public virtual ObjectResult<Account> sp_AllCompAccounts_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("sp_AllCompAccounts_Get");
        }
    
        public virtual ObjectResult<Account> sp_AllCompAccounts_Get(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("sp_AllCompAccounts_Get", mergeOption);
        }
    }
}
